// Generated by rstantools.  Do not edit by hand.

/*
    isoniche is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    isoniche is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with isoniche.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_isoniche_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 67> locations_array__ =
  {" (found before start of program)",
  " (in 'isoniche', line 12, column 2 to column 22)",
  " (in 'isoniche', line 13, column 2 to column 22)",
  " (in 'isoniche', line 14, column 2 to column 22)",
  " (in 'isoniche', line 15, column 2 to column 22)",
  " (in 'isoniche', line 16, column 2 to column 18)",
  " (in 'isoniche', line 20, column 9 to column 20)",
  " (in 'isoniche', line 20, column 2 to column 27)",
  " (in 'isoniche', line 21, column 9 to column 20)",
  " (in 'isoniche', line 21, column 2 to column 30)",
  " (in 'isoniche', line 22, column 9 to column 10)",
  " (in 'isoniche', line 22, column 2 to column 18)",
  " (in 'isoniche', line 23, column 9 to column 10)",
  " (in 'isoniche', line 23, column 2 to column 21)",
  " (in 'isoniche', line 24, column 9 to column 10)",
  " (in 'isoniche', line 24, column 2 to column 16)",
  " (in 'isoniche', line 25, column 21 to column 22)",
  " (in 'isoniche', line 25, column 2 to column 24)",
  " (in 'isoniche', line 26, column 21 to column 22)",
  " (in 'isoniche', line 26, column 2 to column 24)",
  " (in 'isoniche', line 28, column 2 to column 24)",
  " (in 'isoniche', line 29, column 2 to column 55)",
  " (in 'isoniche', line 30, column 2 to column 37)",
  " (in 'isoniche', line 31, column 2 to column 42)",
  " (in 'isoniche', line 33, column 2 to column 27)",
  " (in 'isoniche', line 34, column 2 to column 58)",
  " (in 'isoniche', line 35, column 2 to column 40)",
  " (in 'isoniche', line 36, column 2 to column 45)",
  " (in 'isoniche', line 37, column 2 to column 13)",
  " (in 'isoniche', line 38, column 2 to column 24)",
  " (in 'isoniche', line 40, column 4 to column 47)",
  " (in 'isoniche', line 41, column 4 to column 45)",
  " (in 'isoniche', line 42, column 4 to column 28)",
  " (in 'isoniche', line 43, column 4 to column 28)",
  " (in 'isoniche', line 39, column 15 to line 44, column 3)",
  " (in 'isoniche', line 39, column 2 to line 44, column 3)",
  " (in 'isoniche', line 47, column 4 to column 78)",
  " (in 'isoniche', line 46, column 15 to line 48, column 3)",
  " (in 'isoniche', line 46, column 2 to line 48, column 3)",
  " (in 'isoniche', line 50, column 2 to column 24)",
  " (in 'isoniche', line 51, column 2 to column 24)",
  " (in 'isoniche', line 52, column 2 to column 24)",
  " (in 'isoniche', line 53, column 2 to column 24)",
  " (in 'isoniche', line 54, column 2 to column 23)",
  " (in 'isoniche', line 57, column 4 to column 47)",
  " (in 'isoniche', line 56, column 15 to line 58, column 3)",
  " (in 'isoniche', line 56, column 2 to line 58, column 3)",
  " (in 'isoniche', line 2, column 2 to column 8)",
  " (in 'isoniche', line 3, column 2 to column 11)",
  " (in 'isoniche', line 4, column 2 to column 11)",
  " (in 'isoniche', line 5, column 2 to column 8)",
  " (in 'isoniche', line 6, column 9 to column 10)",
  " (in 'isoniche', line 6, column 12 to column 23)",
  " (in 'isoniche', line 6, column 2 to column 27)",
  " (in 'isoniche', line 7, column 9 to column 10)",
  " (in 'isoniche', line 7, column 12 to column 23)",
  " (in 'isoniche', line 7, column 2 to column 27)",
  " (in 'isoniche', line 8, column 9 to column 10)",
  " (in 'isoniche', line 8, column 12 to column 13)",
  " (in 'isoniche', line 8, column 2 to column 17)",
  " (in 'isoniche', line 9, column 9 to column 10)",
  " (in 'isoniche', line 9, column 2 to column 17)",
  " (in 'isoniche', line 12, column 9 to column 13)",
  " (in 'isoniche', line 13, column 9 to column 13)",
  " (in 'isoniche', line 14, column 9 to column 13)",
  " (in 'isoniche', line 15, column 9 to column 13)",
  " (in 'isoniche', line 16, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_isoniche final : public model_base_crtp<model_isoniche> {
private:
  int N;
  std::vector<int> P;
  std::vector<int> K;
  int J;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,-1> Z_data__;
  Eigen::Matrix<double,-1,-1> G_data__;
  Eigen::Matrix<double,-1,-1> y_data__;
  int beta_1_1dim__;
  int beta_2_1dim__;
  int zeta_1_1dim__;
  int zeta_2_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Z{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> G{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> y{nullptr, 0, 0};
public:
  ~model_isoniche() {}
  model_isoniche(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_isoniche_namespace::model_isoniche";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 47;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 47;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 48;
      context__.validate_dims("data initialization", "P", "int",
        std::vector<size_t>{static_cast<size_t>(2)});
      P = std::vector<int>(2, std::numeric_limits<int>::min());
      current_statement__ = 48;
      P = context__.vals_i("P");
      current_statement__ = 49;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{static_cast<size_t>(2)});
      K = std::vector<int>(2, std::numeric_limits<int>::min());
      current_statement__ = 49;
      K = context__.vals_i("K");
      current_statement__ = 50;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 50;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 51;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("X", "P[1] + P[2]",
        (stan::model::rvalue(P, "P", stan::model::index_uni(1)) +
        stan::model::rvalue(P, "P", stan::model::index_uni(2))));
      current_statement__ = 53;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(
            (stan::model::rvalue(P, "P", stan::model::index_uni(1)) +
            stan::model::rvalue(P, "P", stan::model::index_uni(2))))});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                   (stan::model::rvalue(P, "P", stan::model::index_uni(1)) +
                   stan::model::rvalue(P, "P", stan::model::index_uni(2))),
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N,
        (stan::model::rvalue(P, "P", stan::model::index_uni(1)) +
        stan::model::rvalue(P, "P", stan::model::index_uni(2))));
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 53;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <=
             (stan::model::rvalue(P, "P", stan::model::index_uni(1)) +
             stan::model::rvalue(P, "P", stan::model::index_uni(2))); ++sym1__) {
          current_statement__ = 53;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 53;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 53;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 54;
      stan::math::validate_non_negative_index("Z", "N", N);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("Z", "K[1] + K[2]",
        (stan::model::rvalue(K, "K", stan::model::index_uni(1)) +
        stan::model::rvalue(K, "K", stan::model::index_uni(2))));
      current_statement__ = 56;
      context__.validate_dims("data initialization", "Z", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(
            (stan::model::rvalue(K, "K", stan::model::index_uni(1)) +
            stan::model::rvalue(K, "K", stan::model::index_uni(2))))});
      Z_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                   (stan::model::rvalue(K, "K", stan::model::index_uni(1)) +
                   stan::model::rvalue(K, "K", stan::model::index_uni(2))),
                   std::numeric_limits<double>::quiet_NaN());
      new (&Z) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Z_data__.data(), N,
        (stan::model::rvalue(K, "K", stan::model::index_uni(1)) +
        stan::model::rvalue(K, "K", stan::model::index_uni(2))));
      {
        std::vector<local_scalar_t__> Z_flat__;
        current_statement__ = 56;
        Z_flat__ = context__.vals_r("Z");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <=
             (stan::model::rvalue(K, "K", stan::model::index_uni(1)) +
             stan::model::rvalue(K, "K", stan::model::index_uni(2))); ++sym1__) {
          current_statement__ = 56;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 56;
            stan::model::assign(Z, Z_flat__[(pos__ - 1)],
              "assigning variable Z", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 56;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 57;
      stan::math::validate_non_negative_index("G", "N", N);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("G", "J", J);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "G", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(J)});
      G_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, J,
                   std::numeric_limits<double>::quiet_NaN());
      new (&G) Eigen::Map<Eigen::Matrix<double,-1,-1>>(G_data__.data(), N, J);
      {
        std::vector<local_scalar_t__> G_flat__;
        current_statement__ = 59;
        G_flat__ = context__.vals_r("G");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 59;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 59;
            stan::model::assign(G, G_flat__[(pos__ - 1)],
              "assigning variable G", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 59;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 60;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)});
      y_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, 2,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,-1>>(y_data__.data(), N, 2);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 61;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 61;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 61;
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 61;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 62;
      beta_1_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 62;
      beta_1_1dim__ = stan::model::rvalue(P, "P", stan::model::index_uni(1));
      current_statement__ = 62;
      stan::math::validate_non_negative_index("beta_1", "P[1]", beta_1_1dim__);
      current_statement__ = 63;
      beta_2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 63;
      beta_2_1dim__ = stan::model::rvalue(P, "P", stan::model::index_uni(2));
      current_statement__ = 63;
      stan::math::validate_non_negative_index("beta_2", "P[2]", beta_2_1dim__);
      current_statement__ = 64;
      zeta_1_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 64;
      zeta_1_1dim__ = stan::model::rvalue(K, "K", stan::model::index_uni(1));
      current_statement__ = 64;
      stan::math::validate_non_negative_index("zeta_1", "K[1]", zeta_1_1dim__);
      current_statement__ = 65;
      zeta_2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 65;
      zeta_2_1dim__ = stan::model::rvalue(K, "K", stan::model::index_uni(2));
      current_statement__ = 65;
      stan::math::validate_non_negative_index("zeta_2", "K[2]", zeta_2_1dim__);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("gamma", "J", J);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = beta_1_1dim__ + beta_2_1dim__ + zeta_1_1dim__ +
      zeta_2_1dim__ + J;
  }
  inline std::string model_name() const final {
    return "model_isoniche";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_isoniche_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      beta_1 = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(beta_1_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_2_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      beta_2 = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(beta_2_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(zeta_1_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      zeta_1 = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(zeta_1_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(zeta_2_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      zeta_2 = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(zeta_2_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 5;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      {
        current_statement__ = 6;
        stan::math::validate_non_negative_index("B", "P[1] + P[2]",
          (stan::model::rvalue(P, "P", stan::model::index_uni(1)) +
          stan::model::rvalue(P, "P", stan::model::index_uni(2))));
        Eigen::Matrix<local_scalar_t__,-1,-1> B =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::model::rvalue(
                                                             P, "P",
                                                             stan::model::index_uni(
                                                               1)) +
            stan::model::rvalue(P, "P", stan::model::index_uni(2))), 2,
            DUMMY_VAR__);
        current_statement__ = 8;
        stan::math::validate_non_negative_index("Zeta", "K[1] + K[2]",
          (stan::model::rvalue(K, "K", stan::model::index_uni(1)) +
          stan::model::rvalue(K, "K", stan::model::index_uni(2))));
        Eigen::Matrix<local_scalar_t__,-1,-1> Zeta =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::model::rvalue(
                                                             K, "K",
                                                             stan::model::index_uni(
                                                               1)) +
            stan::model::rvalue(K, "K", stan::model::index_uni(2))), 2,
            DUMMY_VAR__);
        current_statement__ = 10;
        stan::math::validate_non_negative_index("mu", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,-1> mu =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, 2, DUMMY_VAR__);
        current_statement__ = 12;
        stan::math::validate_non_negative_index("sigma", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,-1> sigma =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, 2, DUMMY_VAR__);
        current_statement__ = 14;
        stan::math::validate_non_negative_index("rho", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> rho =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 16;
        stan::math::validate_non_negative_index("Omega", "N", N);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> Omega =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(N,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(2, 2,
              DUMMY_VAR__));
        current_statement__ = 18;
        stan::math::validate_non_negative_index("Sigma", "N", N);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> Sigma =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(N,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(2, 2,
              DUMMY_VAR__));
        current_statement__ = 20;
        stan::model::assign(B, beta_1, "assigning variable B",
          stan::model::index_min_max(1,
            stan::model::rvalue(P, "P", stan::model::index_uni(1))),
          stan::model::index_uni(1));
        current_statement__ = 21;
        stan::model::assign(B,
          stan::math::rep_vector(0,
            stan::model::rvalue(P, "P", stan::model::index_uni(2))),
          "assigning variable B",
          stan::model::index_min_max(
            (stan::model::rvalue(P, "P", stan::model::index_uni(1)) + 1),
            (stan::model::rvalue(P, "P", stan::model::index_uni(1)) +
            stan::model::rvalue(P, "P", stan::model::index_uni(2)))),
          stan::model::index_uni(1));
        current_statement__ = 22;
        stan::model::assign(B,
          stan::math::rep_vector(0,
            stan::model::rvalue(P, "P", stan::model::index_uni(1))),
          "assigning variable B",
          stan::model::index_min_max(1,
            stan::model::rvalue(P, "P", stan::model::index_uni(1))),
          stan::model::index_uni(2));
        current_statement__ = 23;
        stan::model::assign(B, beta_2, "assigning variable B",
          stan::model::index_min_max(
            (stan::model::rvalue(P, "P", stan::model::index_uni(1)) + 1),
            (stan::model::rvalue(P, "P", stan::model::index_uni(1)) +
            stan::model::rvalue(P, "P", stan::model::index_uni(2)))),
          stan::model::index_uni(2));
        current_statement__ = 24;
        stan::model::assign(Zeta, zeta_1, "assigning variable Zeta",
          stan::model::index_min_max(1,
            stan::model::rvalue(K, "K", stan::model::index_uni(1))),
          stan::model::index_uni(1));
        current_statement__ = 25;
        stan::model::assign(Zeta,
          stan::math::rep_vector(0,
            stan::model::rvalue(K, "K", stan::model::index_uni(2))),
          "assigning variable Zeta",
          stan::model::index_min_max(
            (stan::model::rvalue(K, "K", stan::model::index_uni(1)) + 1),
            (stan::model::rvalue(K, "K", stan::model::index_uni(1)) +
            stan::model::rvalue(K, "K", stan::model::index_uni(2)))),
          stan::model::index_uni(1));
        current_statement__ = 26;
        stan::model::assign(Zeta,
          stan::math::rep_vector(0,
            stan::model::rvalue(K, "K", stan::model::index_uni(1))),
          "assigning variable Zeta",
          stan::model::index_min_max(1,
            stan::model::rvalue(K, "K", stan::model::index_uni(1))),
          stan::model::index_uni(2));
        current_statement__ = 27;
        stan::model::assign(Zeta, zeta_2, "assigning variable Zeta",
          stan::model::index_min_max(
            (stan::model::rvalue(K, "K", stan::model::index_uni(1)) + 1),
            (stan::model::rvalue(K, "K", stan::model::index_uni(1)) +
            stan::model::rvalue(K, "K", stan::model::index_uni(2)))),
          stan::model::index_uni(2));
        current_statement__ = 28;
        stan::model::assign(mu, stan::math::multiply(X, B),
          "assigning variable mu");
        current_statement__ = 29;
        stan::model::assign(sigma,
          stan::math::exp(stan::math::multiply(Z, Zeta)),
          "assigning variable sigma");
        current_statement__ = 35;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 30;
          stan::model::assign(rho, ((2 *
            stan::math::inv_logit(
              stan::math::multiply(
                stan::model::rvalue(G, "G", stan::model::index_uni(i),
                  stan::model::index_omni()), gamma))) - 1),
            "assigning variable rho", stan::model::index_uni(i));
          current_statement__ = 31;
          stan::model::assign(Omega,
            stan::math::diag_matrix(stan::math::rep_vector(1, 2)),
            "assigning variable Omega", stan::model::index_uni(i));
          current_statement__ = 32;
          stan::model::assign(Omega,
            stan::model::rvalue(rho, "rho", stan::model::index_uni(i)),
            "assigning variable Omega", stan::model::index_uni(i),
            stan::model::index_uni(1), stan::model::index_uni(2));
          current_statement__ = 33;
          stan::model::assign(Omega,
            stan::model::rvalue(rho, "rho", stan::model::index_uni(i)),
            "assigning variable Omega", stan::model::index_uni(i),
            stan::model::index_uni(2), stan::model::index_uni(1));
        }
        current_statement__ = 38;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 36;
          stan::model::assign(Sigma,
            stan::math::multiply(
              stan::math::multiply(
                stan::math::diag_matrix(
                  stan::math::transpose(
                    stan::model::rvalue(sigma, "sigma",
                      stan::model::index_uni(i), stan::model::index_omni()))),
                stan::model::rvalue(Omega, "Omega", stan::model::index_uni(i))),
              stan::math::diag_matrix(
                stan::math::transpose(
                  stan::model::rvalue(sigma, "sigma",
                    stan::model::index_uni(i), stan::model::index_omni())))),
            "assigning variable Sigma", stan::model::index_uni(i));
        }
        current_statement__ = 39;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_1, 0, 5));
        current_statement__ = 40;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_2, 0, 5));
        current_statement__ = 41;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(zeta_1));
        current_statement__ = 42;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(zeta_2));
        current_statement__ = 43;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(gamma));
        current_statement__ = 46;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 44;
          lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(
                           stan::math::transpose(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i),
                               stan::model::index_omni())),
                           stan::math::transpose(
                             stan::model::rvalue(mu, "mu",
                               stan::model::index_uni(i),
                               stan::model::index_omni())),
                           stan::model::rvalue(Sigma, "Sigma",
                             stan::model::index_uni(i))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_isoniche_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta_1 =
        Eigen::Matrix<double,-1,1>::Constant(beta_1_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta_1 = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(beta_1_1dim__);
      Eigen::Matrix<double,-1,1> beta_2 =
        Eigen::Matrix<double,-1,1>::Constant(beta_2_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      beta_2 = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(beta_2_1dim__);
      Eigen::Matrix<double,-1,1> zeta_1 =
        Eigen::Matrix<double,-1,1>::Constant(zeta_1_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      zeta_1 = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(zeta_1_1dim__);
      Eigen::Matrix<double,-1,1> zeta_2 =
        Eigen::Matrix<double,-1,1>::Constant(zeta_2_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      zeta_2 = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(zeta_2_1dim__);
      Eigen::Matrix<double,-1,1> gamma =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      out__.write(beta_1);
      out__.write(beta_2);
      out__.write(zeta_1);
      out__.write(zeta_2);
      out__.write(gamma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta_1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(beta_1_1dim__),
        "assigning variable beta_1");
      out__.write(beta_1);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_2_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(beta_2,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(beta_2_1dim__),
        "assigning variable beta_2");
      out__.write(beta_2);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(zeta_1_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(zeta_1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(zeta_1_1dim__),
        "assigning variable zeta_1");
      out__.write(zeta_1);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(zeta_2_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(zeta_2,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(zeta_2_1dim__),
        "assigning variable zeta_2");
      out__.write(zeta_2);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(gamma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable gamma");
      out__.write(gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta_1", "double",
        std::vector<size_t>{static_cast<size_t>(beta_1_1dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta_2", "double",
        std::vector<size_t>{static_cast<size_t>(beta_2_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "zeta_1", "double",
        std::vector<size_t>{static_cast<size_t>(zeta_1_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "zeta_2", "double",
        std::vector<size_t>{static_cast<size_t>(zeta_2_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_1_flat__;
        current_statement__ = 1;
        beta_1_flat__ = context__.vals_r("beta_1");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= beta_1_1dim__; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta_1, beta_1_flat__[(pos__ - 1)],
            "assigning variable beta_1", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_1);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_2_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_2_flat__;
        current_statement__ = 2;
        beta_2_flat__ = context__.vals_r("beta_2");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= beta_2_1dim__; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(beta_2, beta_2_flat__[(pos__ - 1)],
            "assigning variable beta_2", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_2);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(zeta_1_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> zeta_1_flat__;
        current_statement__ = 3;
        zeta_1_flat__ = context__.vals_r("zeta_1");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= zeta_1_1dim__; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(zeta_1, zeta_1_flat__[(pos__ - 1)],
            "assigning variable zeta_1", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(zeta_1);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(zeta_2_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> zeta_2_flat__;
        current_statement__ = 4;
        zeta_2_flat__ = context__.vals_r("zeta_2");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= zeta_2_1dim__; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(zeta_2, zeta_2_flat__[(pos__ - 1)],
            "assigning variable zeta_2", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(zeta_2);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 5;
        gamma_flat__ = context__.vals_r("gamma");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(gamma, gamma_flat__[(pos__ - 1)],
            "assigning variable gamma", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta_1", "beta_2", "zeta_1",
                "zeta_2", "gamma"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    beta_1_1dim__)},
                std::vector<size_t>{static_cast<size_t>(beta_2_1dim__)},
                std::vector<size_t>{static_cast<size_t>(zeta_1_1dim__)},
                std::vector<size_t>{static_cast<size_t>(zeta_2_1dim__)},
                std::vector<size_t>{static_cast<size_t>(J)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= beta_1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= zeta_1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "zeta_1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= zeta_2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "zeta_2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= beta_1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= zeta_1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "zeta_1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= zeta_2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "zeta_2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_2_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"zeta_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(zeta_1_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"zeta_2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(zeta_2_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_2_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"zeta_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(zeta_1_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"zeta_2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(zeta_2_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((beta_1_1dim__ + beta_2_1dim__) +
      zeta_1_1dim__) + zeta_2_1dim__) + J);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((beta_1_1dim__ + beta_2_1dim__) +
      zeta_1_1dim__) + zeta_2_1dim__) + J);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_isoniche_namespace::model_isoniche;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_isoniche_namespace::profiles__;
}
#endif
#endif
